!function(Q){var F={};function U(B){if(F[B])return F[B].exports;var s=F[B]={i:B,l:!1,exports:{}};return Q[B].call(s.exports,s,s.exports,U),s.l=!0,s.exports}U.m=Q,U.c=F,U.d=function(Q,F,B){U.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:B})},U.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},U.t=function(Q,F){if(1&F&&(Q=U(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(U.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var s in Q)U.d(B,s,function(F){return Q[F]}.bind(null,s));return B},U.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return U.d(F,"a",F),F},U.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},U.p="dist/",U(U.s=0)}([function(module,exports){eval("function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nvar canvas = document.querySelector('#canvas');\nvar ctx = canvas.getContext('2d');\nvar selectTool = document.querySelectorAll('.tools--buttons-elem');\nvar searchInput = document.querySelector('#search');\nvar alertMess = document.querySelector('.div_message');\nvar resolution = document.querySelectorAll('.resolution--button');\nvar clientID = '6eead276a92ca5c7033f38dccfea6eb3aa045a61c5789af291ecd46ceda74be5';\nvar tools = {\n  fillBucket: false,\n  chooseColor: false,\n  pencil: true\n};\n\nfunction showAlert(text) {\n  alertMess.textContent = text;\n  alertMess.classList.remove('hidden');\n  alertMess.classList.add('alert');\n  setTimeout(function () {\n    alertMess.classList.remove('alert');\n    alertMess.classList.add('hidden');\n  }, 2000);\n}\n\nfunction showMessage(text) {\n  alertMess.textContent = text;\n  alertMess.classList.remove('hidden');\n  alertMess.classList.add('message');\n  setTimeout(function () {\n    alertMess.classList.remove('message');\n    alertMess.classList.add('hidden');\n  }, 2000);\n}\n\nfunction removeResolutionClass() {\n  _toConsumableArray(resolution).forEach(function (elem) {\n    elem.classList.remove('active');\n  });\n}\n\nvar isDraw = false;\nvar isInput = false;\nvar isGrayscale = true;\nsearchInput.blur();\n\nfunction addRemoveClassTools() {\n  var button = document.querySelectorAll('.tools--buttons-elem');\n\n  _toConsumableArray(button).forEach(function (elem) {\n    elem.classList.remove('active');\n  });\n\n  if (tools.fillBucket === true) {\n    button[0].classList.add('active');\n  }\n\n  if (tools.chooseColor === true) {\n    button[1].classList.add('active');\n  }\n\n  if (tools.pencil === true) {\n    button[2].classList.add('active');\n  }\n}\n\naddRemoveClassTools();\nvar realSizeCanvas = 512;\nvar virtualPixelCanvas = 4;\ncanvas.style.width = \"\".concat(realSizeCanvas, \"px\");\ncanvas.style.height = \"\".concat(realSizeCanvas, \"px\");\ncanvas.width = realSizeCanvas / virtualPixelCanvas;\ncanvas.height = realSizeCanvas / virtualPixelCanvas;\nctx.fillStyle = 'rgba(255,255,255,255)';\nctx.fill();\nctx.fillRect(0, 0, canvas.width, canvas.height);\n\nfunction colorSave() {\n  var colorObj = {};\n  colorObj.current = document.querySelector('#current').value;\n  colorObj.prev = document.querySelector('#prev').style.backgroundColor;\n  return JSON.stringify(colorObj);\n}\n\nfunction grayscale() {\n  var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  var data = imageData.data;\n\n  if (data.every(function (value) {\n    return value === 255;\n  })) {\n    showAlert('Image not uploaded, canvas is empty');\n  }\n\n  for (var i = 0; i < data.length; i += 4) {\n    var avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n    data[i] = avg; // red\n\n    data[i + 1] = avg; // green\n\n    data[i + 2] = avg; // blue\n  }\n\n  ctx.putImageData(imageData, 0, 0);\n}\n\nfunction saveApp() {\n  localStorage.setItem('canvasImage', canvas.toDataURL());\n  localStorage.setItem('tools', JSON.stringify(tools));\n  localStorage.setItem('color', colorSave());\n  localStorage.setItem('pixel', JSON.stringify(virtualPixelCanvas));\n}\n\nfunction restoreCanvas() {\n  var pixel = +JSON.parse(localStorage.getItem('pixel'));\n  removeResolutionClass();\n\n  if (pixel === 1) {\n    _toConsumableArray(resolution)[3].classList.add('active');\n  } else if (pixel === 2) {\n    _toConsumableArray(resolution)[2].classList.add('active');\n  } else if (pixel === 4) {\n    _toConsumableArray(resolution)[1].classList.add('active');\n  } else if (pixel === 8) {\n    _toConsumableArray(resolution)[0].classList.add('active');\n  }\n\n  changeSize(pixel);\n  var dataURL = localStorage.getItem('canvasImage');\n  var img = new Image();\n  img.src = dataURL;\n\n  img.onload = function () {\n    ctx.drawImage(img, 0, 0);\n  };\n\n  var toolsJSON = JSON.parse(localStorage.getItem('tools'));\n  tools.fillBucket = false;\n  tools.chooseColor = false;\n  tools.pencil = false;\n  tools.fillBucket = toolsJSON.fillBucket;\n  tools.chooseColor = toolsJSON.chooseColor;\n  tools.pencil = toolsJSON.pencil;\n  addRemoveClassTools();\n  var colorJSON = JSON.parse(localStorage.getItem('color'));\n  document.querySelector('#current').value = colorJSON.current;\n  document.querySelector('#prev').style.backgroundColor = colorJSON.prev;\n}\n\nfunction searchWord() {\n  return searchInput.value.split(' ').join(',');\n}\n\nfunction clearCanvas() {\n  ctx.fillStyle = 'rgba(255,255,255,255)';\n  ctx.fill();\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n}\n\nfunction takeColor() {\n  return document.querySelector('#current').value;\n}\n\nfunction setPrevColor() {\n  var temp = takeColor();\n  var prevColor = document.getElementById('prev');\n  prevColor.style.backgroundColor = temp;\n  prevColor.setAttribute('data', \"\".concat(temp));\n}\n\nvar getColorAtPixel = function getColorAtPixel(imageData, x, y) {\n  var width = imageData.width,\n      data = imageData.data;\n  return {\n    r: data[4 * (width * y + x)],\n    g: data[4 * (width * y + x) + 1],\n    b: data[4 * (width * y + x) + 2],\n    a: data[4 * (width * y + x) + 3]\n  };\n};\n\nfunction rgbToHex(r, g, b) {\n  return (r << 16 | g << 8 | b).toString(16);\n}\n\nfunction getLinkToImage(search) {\n  var url, response, data, img;\n  return regeneratorRuntime.async(function getLinkToImage$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          url = \"https://api.unsplash.com/photos/random?query=\".concat(search, \"&client_id=\").concat(clientID);\n          _context.next = 3;\n          return regeneratorRuntime.awrap(fetch(url));\n\n        case 3:\n          response = _context.sent;\n          _context.next = 6;\n          return regeneratorRuntime.awrap(response.json());\n\n        case 6:\n          data = _context.sent;\n          img = new Image();\n          img.src = data.urls.regular;\n          img.crossOrigin = 'Anonymous';\n          return _context.abrupt(\"return\", img);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}\n\nfunction loadImage(img) {\n  img.onload = function f() {\n    var ratio;\n    var width;\n    var height;\n    var x;\n    var y;\n\n    function checkSizeImage() {\n      if (img.width > img.height) {\n        ratio = img.width / img.height;\n        width = canvas.width;\n        height = width / ratio;\n      } else {\n        ratio = img.height / img.width;\n        height = canvas.height;\n        width = height / ratio;\n      }\n    }\n\n    function alignCenter() {\n      x = canvas.width / 2 - width / 2;\n      y = canvas.height / 2 - height / 2;\n    }\n\n    function drawImg(img, x, y, w, h) {\n      ctx.drawImage(img, x, y, w, h);\n    }\n\n    checkSizeImage();\n    alignCenter();\n    drawImg(img, x, y, width, height);\n  };\n}\n\nfunction selectTools(event) {\n  tools.fillBucket = false;\n  tools.chooseColor = false;\n  tools.pencil = false;\n\n  if (event.target.innerText === 'Fill bucket') {\n    tools.fillBucket = true;\n  } else if (event.target.innerText === 'Choose color') {\n    tools.chooseColor = true;\n  } else if (event.target.innerText === 'Pencil') {\n    tools.pencil = true;\n  }\n\n  addRemoveClassTools();\n}\n\nvar cordPixel = {\n  x0: 0,\n  y0: 0,\n  x1: 0,\n  y1: 0\n};\n\nfunction setPixel(x, y) {\n  ctx.beginPath();\n  ctx.fillStyle = \"\".concat(takeColor());\n  ctx.fill();\n  ctx.fillRect(x, y, 1, 1);\n  cordPixel.x0 = cordPixel.x1;\n  cordPixel.y0 = cordPixel.y1;\n}\n\nfunction algoritmBresenham(x0, y0, x1, y1) {\n  var dx = Math.abs(x1 - x0);\n  var sx = x0 < x1 ? 1 : -1;\n  var dy = Math.abs(y1 - y0);\n  var sy = y0 < y1 ? 1 : -1;\n  var err = (dx > dy ? dx : -dy) / 2;\n\n  while (true) {\n    setPixel(x0, y0);\n    if (x0 === x1 && y0 === y1) break;\n    var e2 = err;\n\n    if (e2 > -dx) {\n      err -= dy;\n      x0 += sx;\n    }\n\n    if (e2 < dy) {\n      err += dx;\n      y0 += sy;\n    }\n  }\n}\n\nfunction changeSize(n) {\n  localStorage.setItem('canvas', canvas.toDataURL());\n  clearCanvas();\n  virtualPixelCanvas = n;\n  canvas.width = realSizeCanvas / virtualPixelCanvas;\n  canvas.height = realSizeCanvas / virtualPixelCanvas;\n  var dataURL = localStorage.getItem('canvas');\n  var img = new Image();\n  img.src = dataURL;\n  loadImage(img);\n}\n\ndocument.addEventListener('mousedown', function (event) {\n  if (tools.pencil === true && event.target.id === 'canvas') {\n    isDraw = true;\n    cordPixel.x0 = Math.floor(event.offsetX / (realSizeCanvas / canvas.width));\n    cordPixel.y0 = Math.floor(event.offsetY / (realSizeCanvas / canvas.height));\n  } else if (tools.chooseColor === true && event.target.id === 'canvas') {\n    var x = Math.floor(event.offsetX / (realSizeCanvas / canvas.width));\n    var y = Math.floor(event.offsetX / (realSizeCanvas / canvas.height));\n    var current = document.querySelector('#current');\n    var colorPick = ctx.getImageData(0, 0, realSizeCanvas, realSizeCanvas);\n    setPrevColor();\n    var objColor = getColorAtPixel(colorPick, x, y);\n    current.value = \"#\".concat(\"000000\".concat(rgbToHex(objColor.r, objColor.g, objColor.b)).slice(-6));\n  } else if (tools.fillBucket === true && event.target.id === 'canvas') {\n    ctx.fillStyle = \"\".concat(takeColor());\n    ctx.fill();\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n  }\n});\ndocument.addEventListener('mousemove', function (event) {\n  if (isDraw === true) {\n    cordPixel.x1 = Math.floor(event.offsetX / (realSizeCanvas / canvas.width));\n    cordPixel.y1 = Math.floor(event.offsetY / (realSizeCanvas / canvas.height));\n    algoritmBresenham(cordPixel.x0, cordPixel.y0, cordPixel.x1, cordPixel.y1);\n  }\n});\ndocument.addEventListener('mouseup', function () {\n  if (tools.pencil === true) {\n    isDraw = false;\n  }\n});\ndocument.addEventListener('click', function (e) {\n  isInput = e.target.id === 'search';\n\n  if (e.target.innerText === 'load') {\n    clearCanvas();\n    var searchQuery = searchWord();\n    getLinkToImage(searchQuery).then(function (value) {\n      return loadImage(value);\n    });\n  }\n\n  if (e.target.innerText === '512px') {\n    removeResolutionClass();\n    e.target.classList.add('active');\n    changeSize(1);\n    showMessage('selected resolution canvas 512px');\n  }\n\n  if (e.target.innerText === '256px') {\n    removeResolutionClass();\n    e.target.classList.add('active');\n    changeSize(2);\n    showMessage('selected resolution canvas 256px');\n  }\n\n  if (e.target.innerText === '128px') {\n    removeResolutionClass();\n    e.target.classList.add('active');\n    changeSize(4);\n    showMessage('selected resolution canvas 128px');\n  }\n\n  if (e.target.innerText === '64px') {\n    removeResolutionClass();\n    e.target.classList.add('active');\n    changeSize(8);\n    showMessage('selected resolution canvas 64px');\n  }\n\n  if (e.target.className === 'tools--buttons-elem') {\n    selectTools(e);\n  }\n\n  var current = document.querySelector('#current');\n\n  if (e.target.innerText === 'blue') {\n    setPrevColor();\n    current.value = '#0000FF';\n  } else if (e.target.innerText === 'red') {\n    setPrevColor();\n    current.value = '#FF0000';\n  } else if (e.target.innerText === 'Prev color') {\n    current.value = e.target.previousElementSibling.getAttribute('data');\n  } else if (e.target.innerText === 'Current color' || e.target.type === 'color') {\n    setPrevColor();\n  }\n\n  if (e.target.innerText === 'b/w') {\n    if (isGrayscale) {\n      localStorage.setItem('canvas', canvas.toDataURL());\n      grayscale();\n      isGrayscale = false;\n    } else {\n      var dataURL = localStorage.getItem('canvas');\n      var img = new Image();\n      img.src = dataURL;\n\n      img.onload = function imgDraw() {\n        ctx.drawImage(img, 0, 0);\n      };\n\n      isGrayscale = true;\n    }\n  }\n});\ndocument.addEventListener('keydown', function (event) {\n  if (event.code === 'Enter') {\n    var loadButton = document.querySelector('.canvas--load');\n    loadButton.click();\n  }\n\n  if (isInput === false) {\n    switch (event.code) {\n      case 'KeyB':\n        _toConsumableArray(selectTool)[0].click();\n\n        showMessage('selected tool fill bucked');\n        break;\n\n      case 'KeyP':\n        _toConsumableArray(selectTool)[2].click();\n\n        showMessage('selected tool pencil');\n        break;\n\n      case 'KeyC':\n        _toConsumableArray(selectTool)[1].click();\n\n        showMessage('selected tool choose color');\n        break;\n\n      case 'KeyS':\n        saveApp();\n        showMessage('app save');\n        break;\n\n      case 'KeyR':\n        clearCanvas();\n        showMessage('canvas clear');\n        break;\n\n      case 'KeyL':\n        restoreCanvas();\n        showMessage('app load');\n        break;\n\n      default:\n        break;\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}]);